[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\Abhishek\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\Abhishek\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.8.3 (Amazon.com Inc. Java 11.0.19)
[debug]       Load.loadUnit: plugins took 171.6928ms
[debug]       Load.loadUnit: defsScala took 0.4897ms
[debug] [Loading] Scanning directory C:\Users\Abhishek\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Abhishek\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 26.6974 ms
[debug]           Load.resolveProject(global-plugins) took 68.4729ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\Abhishek\.sbt\1.0\plugins, plugins: List(<none>))) took 132.9083ms
[debug] [Loading] Done in C:\Users\Abhishek\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 172.9754ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.4742ms
[debug]     Load.loadUnit(file:/C:/Users/Abhishek/.sbt/1.0/plugins/, ...) took 363.9195ms
[debug]   Load.apply: load took 684.6176ms
[debug]   Load.apply: resolveProjects took 12.0993ms
[debug]   Load.apply: finalTransforms took 94.0325ms
[debug]   Load.apply: config.delegates took 13.2571ms
[debug]   Load.apply: Def.make(settings)... took 775.1974ms
[debug]   Load.apply: structureIndex took 174.2912ms
[debug]   Load.apply: mkStreams took 2.2464ms
[info] loading global plugins from C:\Users\Abhishek\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 10243.3093ms
[debug]           Load.loadUnit: plugins took 50.4049ms
[debug]           Load.loadUnit: defsScala took 0.006ms
[debug] [Loading] Scanning directory C:\Users\Abhishek\IdeaProjects\ApacheSpark\project
[debug]             Load.loadUnit: mkEval took 10.1661ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Abhishek\IdeaProjects\ApacheSpark\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 2.7886 ms
[info] loading settings for project apachespark-build from idea.sbt ...
[debug]               Load.resolveProject(apachespark-build) took 7.4403ms
[debug]             Load.loadTransitive: finalizeProject(Project(id apachespark-build, base: C:\Users\Abhishek\IdeaProjects\ApacheSpark\project, plugins: List(<none>))) took 11.1222ms
[debug] [Loading] Done in C:\Users\Abhishek\IdeaProjects\ApacheSpark\project, returning: (apachespark-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 4838.6047ms
[debug]           Load.loadUnit: cleanEvalClasses took 7.6594ms
[debug]         Load.loadUnit(file:/C:/Users/Abhishek/IdeaProjects/ApacheSpark/project/, ...) took 4898.1715ms
[debug]       Load.apply: load took 4900.1975ms
[debug]       Load.apply: resolveProjects took 0.1808ms
[debug]       Load.apply: finalTransforms took 11.2067ms
[debug]       Load.apply: config.delegates took 0.5333ms
[debug]       Load.apply: Def.make(settings)... took 132.6002ms
[debug]       Load.apply: structureIndex took 29.4871ms
[debug]       Load.apply: mkStreams took 0.0027ms
[info] loading project definition from C:\Users\Abhishek\IdeaProjects\ApacheSpark\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 10344.8667ms
[debug]     Load.loadUnit: defsScala took 0.0057ms
[debug] [Loading] Scanning directory C:\Users\Abhishek\IdeaProjects\ApacheSpark
[debug]       Load.loadUnit: mkEval took 0.3424ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 2.4797 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 54.5665ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\Abhishek\IdeaProjects\ApacheSpark, plugins: List(<none>))) took 59.317ms
[debug] [Loading] Done in C:\Users\Abhishek\IdeaProjects\ApacheSpark, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 1726.8123ms
[debug]     Load.loadUnit: cleanEvalClasses took 8.7488ms
[debug]   Load.loadUnit(file:/C:/Users/Abhishek/IdeaProjects/ApacheSpark/, ...) took 12081.2102ms
[debug] Load.apply: load took 12083.3954ms
[debug] Load.apply: resolveProjects took 0.2718ms
[debug] Load.apply: finalTransforms took 34.4603ms
[debug] Load.apply: config.delegates took 0.4209ms
[debug] Load.apply: Def.make(settings)... took 104.3384ms
[debug] Load.apply: structureIndex took 26.3975ms
[debug] Load.apply: mkStreams took 0.0026ms
[info] set current project to ApacheSpark (in build file:/C:/Users/Abhishek/IdeaProjects/ApacheSpark/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 63813 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 63813, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to ApacheSpark (in build file:/C:/Users/Abhishek/IdeaProjects/ApacheSpark/)
[debug] > Exec(idea-shell, None, None)
